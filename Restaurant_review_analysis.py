# -*- coding: utf-8 -*-
"""aryan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SaOklhjOmLTMXrWJekWjErDYf2sOYkjq

# Sentiment Analysis of Restaurant Reviews

# Import Required Libraries
"""

#connect google drive with colab

from google.colab import drive
drive.mount('/content/drive')

# Importing essential libraries
import pandas as pd
import numpy as np

"""# Load and prepare data

"""

# Loading the dataset
df=pd.read_csv('/content/drive/MyDrive/Restaurant_Reviews (2).tsv', delimiter='\t', quoting=3, encoding = "ISO-8859-1")

df.head()

df.shape

df.columns

data=df.copy()
data.info()

"""# Cleaning and pre-processing of data"""

# Importing essential libraries for performing Natural Language Processing on 'Restaurant_Reviews.csv' dataset
# cleaning the texts
import re
import nltk

# downloading the list of stopword
nltk.download('stopwords')

from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer

no_of_rows = data.shape[0]
stop_words = set(stopwords.words('english'))
corpus = []
for i in range(no_of_rows):
    review = re.sub(pattern='[^a-zA-Z]', repl=' ', string=data['Review'][i])
    review = review.lower()
    review_words = review.split()
    review_words = [word for word in review_words if not word in stop_words]
    ps = PorterStemmer()
    review = [ps.stem(word) for word in review_words]
    review = ' '.join(review)
    corpus.append(review)

corpus

# creating the bag of words model
from sklearn.feature_extraction.text import CountVectorizer

# creating the count vectorizer model
cv = CountVectorizer(max_features=1500)

# feeding the corpus data to the count vectorizer model
X = cv.fit_transform(corpus).toarray()
y= data.iloc[:,1].values

"""## Split data (80:20) [train, test]"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=0)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

"""#MODEL TRAINING : MULTINOMIAL NAIVE BAYES (MODEL 1)"""

from sklearn.naive_bayes import MultinomialNB

classifier = MultinomialNB()
classifier.fit(X_train, y_train)

y_pred = classifier.predict(X_test)
y_pred

from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

score1 = accuracy_score(y_test, y_pred)
score2 = precision_score(y_test, y_pred)
score3 = recall_score(y_test, y_pred)

print("Scores:")
print("Accuracy score is: {}%".format(round(score1*100, 2)))
print("Precision score is: {}%".format(round(score2*100, 2)))
print("Recall score is: {}%".format(round(score3*100, 2)))

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

# Commented out IPython magic to ensure Python compatibility.
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

plt.figure(figsize = (10, 6))
sns.heatmap(cm, annot=True, cmap='YlGnBu', xticklabels=['Negative', 'Positive'], yticklabels=['Negative', 'Positive'])
plt.xlabel('Predicted values')
plt.ylabel('Actual values')

best_accuracy = 0.0
alpha_val = 0.0
for i in np.arange(0.1, 1.1, 0.1):
    temp_classifier = MultinomialNB(alpha=i)
    temp_classifier.fit(X_train, y_train)
    temp_y_pred = temp_classifier.predict(X_test)
    score = accuracy_score(y_test, temp_y_pred)
    print("Accuracy score for alpha = ", i, " is : ", round(score*100, 2))
    if score>best_accuracy:
        best_accuracy = score
        alpha_val = i
print()
print("Best accuracy is: ", round(best_accuracy*100, 2), " with aplha value: ", alpha_val)

classifier = MultinomialNB(alpha=0.2)
classifier.fit(X_train, y_train)

"""#Predictions"""

def predict_sentiment(sample_review):
    sample_review = re.sub(pattern='[^a-zA-Z]', repl=' ', string=sample_review)
    sample_review = sample_review.lower()
    sample_review = sample_review.split()
    sample_review_words = [word for word in sample_review if not word in stop_words]
    ps = PorterStemmer()
    final = [ps.stem(word) for word in sample_review_words]
    final = ' '.join(final)

    temp = cv.transform([final]).toarray()
    return classifier.predict(temp)

sample_review = 'Food was very delicious.'
if predict_sentiment(sample_review):
    print("This is POSITIVE review")
else:
    print("This is NEGATIVE review")

sample_review = 'The food was really bad and the service was very slow.'
if predict_sentiment(sample_review):
    print("This is POSITIVE review")
else:
    print("This is NEGATIVE review")

sample_review = 'The food was absloutely disgusting,rotten and was not good at all.'
if predict_sentiment(sample_review):
    print("This is POSITIVE review")
else:
    print("This is NEGATIVE review")

"""# USING RANDOM FOREST MODEL(Model 2)"""

import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(data['Review'], data['Liked'], test_size=0.2, random_state=42)

# Vectorize the text data using CountVectorizer
vectorizer = CountVectorizer(max_features=1000, stop_words='english')
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

# Create a Random Forest classifier
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the classifier on the training data
rf_classifier.fit(X_train_vec, y_train)

# Predict sentiment labels on the test data
y_pred = rf_classifier.predict(X_test_vec)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Test accuracy: {accuracy:.4f}')

# Display a classification report for more detailed metrics
print(classification_report(y_test, y_pred))

